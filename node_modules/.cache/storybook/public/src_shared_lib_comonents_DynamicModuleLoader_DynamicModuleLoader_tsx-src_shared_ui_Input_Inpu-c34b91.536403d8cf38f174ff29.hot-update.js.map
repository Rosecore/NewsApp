{"version":3,"file":"src_shared_lib_comonents_DynamicModuleLoader_DynamicModuleLoader_tsx-src_shared_ui_Input_Inpu-c34b91.536403d8cf38f174ff29.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA","sources":["webpack://prodproj/./src/shared/lib/comonents/DynamicModuleLoader/DynamicModuleLoader.tsx"],"sourcesContent":["import { ReduxStoreWithManager, StateSchemaKey } from 'app/provider/StoreProvider/config/StateSchema';\r\nimport { ReactNode, useEffect } from 'react';\r\nimport { useStore } from 'react-redux';\r\nimport { Reducer } from 'redux';\r\n\r\nexport type ReducersList = {\r\n    [name in StateSchemaKey]?:Reducer\r\n}\r\n\r\n type ReducersListEntry = [StateSchemaKey, Reducer]\r\n\r\ninterface DynamicModuleLoaderProps{\r\n    children:ReactNode,\r\n    reducers:ReducersList\r\n}\r\n\r\nconst DynamicModuleLoader = ({children,reducers}:DynamicModuleLoaderProps) => {\r\n    const store = useStore() as ReduxStoreWithManager\r\n    useEffect(()=>{\r\n        Object.entries(reducers).forEach(([name,reducer])=>{\r\n            store.reducerManager.add(name as StateSchemaKey,reducer)\r\n        })\r\n        return () =>{\r\n            Object.entries(reducers).forEach(([name,reducer])=>{\r\n                store.reducerManager.remove(name as StateSchemaKey)\r\n            })\r\n        }\r\n    })\r\n    return (\r\n        <>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DynamicModuleLoader;"],"names":[],"sourceRoot":""}