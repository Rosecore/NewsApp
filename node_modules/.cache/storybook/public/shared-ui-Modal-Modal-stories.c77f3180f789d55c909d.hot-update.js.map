{"version":3,"file":"shared-ui-Modal-Modal-stories.c77f3180f789d55c909d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AA1EA","sources":["webpack://prodproj/./src/shared/ui/Modal/Modal.tsx"],"sourcesContent":["import { classNames } from 'shared/lib/classNames/classNames';\nimport React, {\n    ReactNode, useCallback, useEffect, useRef, useState,\n} from 'react';\nimport { Portal } from 'shared/ui/Portal/Portal';\nimport { UseTheme } from 'app/provider/themeProvider';\nimport cls from './Modal.module.scss';\n\ninterface ModalProps {\n    className?: string;\n    children?: ReactNode;\n    isOpen?: boolean;\n    onClose?: () => void;\n    lazy?:boolean\n}\n\nconst ANIMATION_DELAY = 300;\n\nexport const Modal = (props: ModalProps) => {\n    const {\n        className,\n        children,\n        isOpen,\n        onClose,\n        lazy\n    } = props;\n\n    const [isClosing, setIsClosing] = useState(false);\n    const [isMounted, setIsMounted] = useState(false)\n    const timerRef = useRef<ReturnType<typeof setTimeout>>();\n    const { theme } = UseTheme();\n\n    const closeHandler = useCallback(() => {\n        if (onClose) {\n            setIsClosing(true);\n            timerRef.current = setTimeout(() => {\n                onClose();\n                setIsClosing(false);\n            }, ANIMATION_DELAY);\n        }\n    }, [onClose]);\n\n    // Новые ссылки!!!\n    const onKeyDown = useCallback((e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n            closeHandler();\n        }\n    }, [closeHandler]);\n\n    const onContentClick = (e: React.MouseEvent) => {\n        e.stopPropagation();\n    };\n    useEffect(()=>{\n        if (isOpen) {\n            setIsMounted(true)\n        }\n\n    },[isOpen])\n\n    useEffect(() => {\n        if (isOpen) {\n            window.addEventListener('keydown', onKeyDown);\n        }\n\n        return () => {\n            clearTimeout(timerRef.current);\n            window.removeEventListener('keydown', onKeyDown);\n        };\n    }, [isOpen, onKeyDown]);\n\n    const mods: Record<string, boolean | undefined> = {\n        [cls.opened]: isOpen,\n        [cls.isClosing]: isClosing\n    };\n    if (lazy && !isMounted){\n        return null\n    }\n\n    return (\n        <Portal>\n            <div className={classNames(cls.Modal, mods, [className, theme])}>\n                <div className={cls.overlay} onClick={closeHandler}>\n                    <div\n                        className={cls.content}\n                        onClick={onContentClick}\n                    >\n                        {children}\n                    </div>\n                </div>\n            </div>\n        </Portal>\n    );\n};\n"],"names":[],"sourceRoot":""}