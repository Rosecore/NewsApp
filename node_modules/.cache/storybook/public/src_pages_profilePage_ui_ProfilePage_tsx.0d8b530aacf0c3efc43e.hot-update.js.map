{"version":3,"file":"src_pages_profilePage_ui_ProfilePage_tsx.0d8b530aacf0c3efc43e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;;;;;;;;;;;;;;;;;;ACDA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AANA;AAQA;;;;;;;;;;;;;;;;;;ACjBA;AACA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA","sources":["webpack://prodproj/./src/entities/Profile/index.ts","webpack://prodproj/./src/entities/Profile/model/slice/ProfileSlice.tsx","webpack://prodproj/./src/pages/profilePage/ui/ProfilePage.tsx","webpack://prodproj/./src/shared/lib/comonents/DynamicModuleLoader/DynamicModuleLoader.tsx"],"sourcesContent":["import { ProfileActions, ProfileReducer } from \"./model/slice/ProfileSlice\";\r\nimport { ProfileType, ProfileSchema } from \"./model/types/profile\";\r\n\r\nexport { ProfileType, ProfileSchema, ProfileReducer, ProfileActions}","import { createSlice } from '@reduxjs/toolkit'\r\nimport { ProfileSchema } from '../types/profile'\r\n\r\nconst initialState: ProfileSchema = {\r\n    readonly:true,\r\n    isLoading:false,\r\n    error:undefined,\r\n    data:undefined\r\n}\r\nexport const ProfileSlice = createSlice({\r\n    name:'Profile',\r\n    initialState,\r\n    reducers:{\r\n       \r\n    }\r\n})\r\nexport const {actions:ProfileActions} = ProfileSlice\r\nexport const {reducer:ProfileReducer} = ProfileSlice","import { BugButton } from \"app/provider/ErrorBoundary\";\r\nimport { Counter } from \"entities/Counter\";\r\nimport { ProfileReducer } from \"entities/Profile\";\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport DynamicModuleLoader, { ReducersList } from \"shared/lib/comonents/DynamicModuleLoader/DynamicModuleLoader\";\r\n\r\nconst reducers: ReducersList = {\r\n    profile:ProfileReducer\r\n}\r\nconst ProfilePage = () =>{\r\n    const {t} = useTranslation()\r\n    return (<DynamicModuleLoader reducers={reducers}>\\\r\n        <div>\r\n            {t('ProfilePage')}\r\n        </div></DynamicModuleLoader>)\r\n}\r\n\r\nexport default ProfilePage","import { ReduxStoreWithManager, StateSchemaKey } from 'app/provider/StoreProvider/config/StateSchema';\r\nimport { ReactNode, useEffect } from 'react';\r\nimport { useStore } from 'react-redux';\r\nimport { Reducer } from 'redux';\r\n\r\nexport type ReducersList = {\r\n    [name in StateSchemaKey]?:Reducer\r\n}\r\n\r\n type ReducersListEntry = [StateSchemaKey, Reducer]\r\n\r\ninterface DynamicModuleLoaderProps{\r\n    children:ReactNode,\r\n    reducers:ReducersList\r\n}\r\n\r\nconst DynamicModuleLoader = ({children,reducers}:DynamicModuleLoaderProps) => {\r\n    const store = useStore() as ReduxStoreWithManager\r\n    useEffect(()=>{\r\n        Object.entries(reducers).forEach(([name,reducer]:ReducersListEntry)=>{\r\n            store.reducerManager.add(name,reducer)\r\n        })\r\n        return () =>{\r\n            Object.entries(reducers).forEach(([name,reducer]:ReducersListEntry)=>{\r\n                store.reducerManager.remove(name)\r\n            })\r\n        }\r\n    },[])\r\n    return (\r\n        <>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DynamicModuleLoader;"],"names":[],"sourceRoot":""}