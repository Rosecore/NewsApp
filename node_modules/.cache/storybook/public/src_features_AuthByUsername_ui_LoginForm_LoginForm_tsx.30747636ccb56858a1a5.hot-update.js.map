{"version":3,"file":"src_features_AuthByUsername_ui_LoginForm_LoginForm_tsx.30747636ccb56858a1a5.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA","sources":["webpack://prodproj/./src/features/AuthByUsername/ui/LoginForm/LoginForm.tsx"],"sourcesContent":["import { classNames } from 'shared/lib/classNames/classNames';\r\nimport cls from './LoginForm.module.scss'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button } from 'shared/ui/Button/Button';\r\nimport { Input } from 'shared/ui/Input/Input';\r\nimport { useSelector } from 'react-redux';\r\nimport { LoginActions, LoginReducer } from '../../model/slice/LoginSlice';\r\nimport { useCallback, memo } from 'react';\r\nimport { LoginByUsername } from '../../model/services/LoginByUsername/LoginByUsername';\r\nimport { TextTheme, Text } from 'shared/ui/Text/Text';\r\nimport { getLoginUsername } from '../../model/selectors/getLoginUsername/getLoginUsername';\r\nimport { getLoginPassword } from '../../model/selectors/getLoginPassword/getLoginPassword';\r\nimport { getLoginError } from    '../../model/selectors/getLoginError/getLoginError';\r\nimport { getLoginIsLoading } from'../..//model/selectors/getLoginIsLoading/getLoginIsLoading';\r\nimport DynamicModuleLoader, { ReducersList } from 'shared/lib/comonents/DynamicModuleLoader/DynamicModuleLoader';\r\nimport { useAppDispatch } from 'app/provider/StoreProvider'\r\n//import { useAppDispatch } from '../../../../app/provider/StoreProvider';\r\n\r\nconst initialReducers:ReducersList = {\r\n    login:LoginReducer\r\n}\r\nexport interface LoginFormProps {\r\n    className?: string,\r\n    onSucsess?:()=>void\r\n}\r\nconst LoginForm = memo(({className, onSucsess}:LoginFormProps) => {\r\n    const {t} = useTranslation()\r\n    const dispatch = useAppDispatch()\r\n    const username = useSelector(getLoginUsername)\r\n    const password = useSelector(getLoginPassword)\r\n    const error = useSelector(getLoginError)\r\n    const isLoading = useSelector(getLoginIsLoading)\r\n\r\n\r\n    const onChangeUsername = useCallback((value:string) =>{\r\n        dispatch(LoginActions.setUsername(value))\r\n    },[dispatch])\r\n\r\n    const onChangePassword =  useCallback((value:string) =>{\r\n        dispatch(LoginActions.setPassword(value))\r\n    },[dispatch])\r\n\r\n    const onLoginClick =  useCallback(async () =>{\r\n        const result = await dispatch(LoginByUsername({username,password}))\r\n        if (result.meta.requestStatus ==='fulfilled'){\r\n            onSucsess();\r\n        }\r\n    },[dispatch,password,username,onSucsess])\r\n\r\n \r\n    return (\r\n        <DynamicModuleLoader reducers={initialReducers}>\r\n            <div className={classNames(cls.LoginForm,{},[className])}>\r\n                <Text title={t('LoginForm')}></Text>\r\n                {error && <Text theme={TextTheme.ERROR} text={error}></Text>}\r\n                <Input type='text' onChange = {onChangeUsername} placeholder={t('EnterUsername')} value={username}></Input>\r\n                <Input type='text' onChange = {onChangePassword} placeholder={t('EnterPassword')} value={password}></Input>\r\n                <Button className={cls.lognBtn} onClick={onLoginClick} disabled={isLoading}>\r\n                    {t(\"Enter\")}\r\n                </Button>\r\n            </div>\r\n        </DynamicModuleLoader>\r\n\r\n    );\r\n});\r\nexport default LoginForm\r\n"],"names":[],"sourceRoot":""}