{"version":3,"file":"src_features_AuthByUsername_ui_LoginForm_LoginForm_tsx.409637b0b4e91e0e7cf3.hot-update.js","mappings":";;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACvCA;AACA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA","sources":["webpack://prodproj/./src/features/AuthByUsername/model/services/LoginByUsername/LoginByUsername.ts","webpack://prodproj/./src/features/AuthByUsername/model/slice/LoginSlice.ts","webpack://prodproj/./src/shared/lib/comonents/DynamicModuleLoader/DynamicModuleLoader.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { ExtraThunk } from 'app/provider/StoreProvider'\r\nimport axios from 'axios'\r\nimport { User, UserActions } from 'entities/User'\r\nimport { USER_LOCALSTORAGE_KEY } from 'shared/const/localstorage'\r\n\r\ninterface LoginByUsernameProps{\r\n    username:string,\r\n    password:string\r\n}\r\nexport const LoginByUsername = createAsyncThunk<User,LoginByUsernameProps,{ rejectValue: string , extra:ExtraThunk}>(\r\n    'login/LoginByUsername',\r\n    async (AuthData, thunkAPI) => {\r\n        try {\r\n            const response = await thunkAPI.extra.api.post<User>('/login', AuthData)\r\n            if (!response){\r\n                throw new Error();\r\n            }\r\n            localStorage.setItem(USER_LOCALSTORAGE_KEY, JSON.stringify(response.data))\r\n            thunkAPI.dispatch(UserActions.setAuthData(response.data))\r\n            return response.data\r\n        } catch (err) {\r\n            return thunkAPI.rejectWithValue(\"Неправильный юзернейм или пароль\")\r\n        }\r\n    }\r\n)\r\n\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { LoginShema } from '../types/LoginShema';\r\nimport { LoginByUsername } from '../services/LoginByUsername/LoginByUsername';\r\n\r\nconst initialState: LoginShema = {\r\n    isLoading: false,\r\n    username: '',\r\n    password: '',\r\n};\r\n\r\nexport const loginSlice = createSlice({\r\n    name: 'login',\r\n    initialState,\r\n    reducers: {\r\n        setUsername: (state, action: PayloadAction<string>) => {\r\n            state.username = action.payload;\r\n        },\r\n        setPassword: (state, action: PayloadAction<string>) => {\r\n            state.password = action.payload;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(LoginByUsername.pending, (state) => {\r\n                state.error = undefined;\r\n                state.isLoading = true;\r\n            })\r\n            .addCase(LoginByUsername.fulfilled, (state) => {\r\n                state.isLoading = false;\r\n            })\r\n            .addCase(LoginByUsername.rejected, (state, action) => {\r\n                state.isLoading = false;\r\n                state.error = action.payload;\r\n            });\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { actions: LoginActions } = loginSlice;\r\nexport const { reducer: LoginReducer } = loginSlice;\r\n","import { FC, ReactNode, useEffect } from 'react';\r\nimport { useDispatch, useStore } from 'react-redux';\r\nimport { ReduxStoreWithManager, StateSchemaKey } from 'app/provider/StoreProvider/config/StateSchema';\r\nimport { Reducer } from '@reduxjs/toolkit';\r\n\r\nexport type ReducersList = {\r\n    [name in StateSchemaKey]?: Reducer;\r\n}\r\n\r\ninterface DynamicModuleLoaderProps {\r\n    reducers: ReducersList;\r\n    removeAfterUnmount?: boolean;\r\n    children:ReactNode;\r\n}\r\n\r\nexport const DynamicModuleLoader: FC<DynamicModuleLoaderProps> = (props) => {\r\n    const {\r\n        children,\r\n        reducers,\r\n        removeAfterUnmount,\r\n    } = props;\r\n\r\n    const store = useStore() as ReduxStoreWithManager;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        Object.entries(reducers).forEach(([name, reducer]) => {\r\n            store.reducerManager.add(name as StateSchemaKey, reducer);\r\n            dispatch({ type: `@INIT ${name} reducer` });\r\n        });\r\n\r\n        return () => {\r\n            if (removeAfterUnmount) {\r\n                Object.entries(reducers).forEach(([name, reducer]) => {\r\n                    store.reducerManager.remove(name as StateSchemaKey);\r\n                    dispatch({ type: `@DESTROY ${name} reducer` });\r\n                });\r\n            }\r\n        };\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        // eslint-disable-next-line react/jsx-no-useless-fragment\r\n        <>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n"],"names":[],"sourceRoot":""}