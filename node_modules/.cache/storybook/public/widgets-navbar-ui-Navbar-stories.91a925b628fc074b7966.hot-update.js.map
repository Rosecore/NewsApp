{"version":3,"file":"widgets-navbar-ui-Navbar-stories.91a925b628fc074b7966.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAGA","sources":["webpack://prodproj/./src/widgets/navbar/ui/Navbar.tsx"],"sourcesContent":["import React, { memo, useCallback, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { classNames } from 'shared/lib/classNames/classNames';\r\nimport cls from './Navbar.module.scss'\r\nimport { AppLinks, AppLinksTheme } from 'shared/ui/AppLink/AppLinks';\r\nimport { ThemeSwitcher } from 'widgets/ThemeSwitcher';\r\nimport { t } from 'i18next';\r\nimport { Button, ThemeButton } from 'shared/ui/Button/Button';\r\nimport { Modal } from 'shared/ui/Modal/Modal';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LoginModal } from 'features/AuthByUsername';\r\nimport { useSelector } from 'react-redux';\r\nimport { UserActions, getUserAuthData } from 'entities/User';\r\nimport { useAppDispatch } from 'app/provider/StoreProvider';\r\n\r\ninterface NavbarProps{\r\n    className?: string\r\n}\r\n\r\nexport const Navbar = memo(({className}:NavbarProps) => {\r\n    const { t } = useTranslation();\r\n    const [isAuthModal, setIsAuthModal] = useState(false);\r\n    const isAuth = useSelector(getUserAuthData)\r\n    const dispatch = useAppDispatch()\r\n    const onClose = useCallback(() => {\r\n        setIsAuthModal(false);\r\n    }, []);\r\n    const onShow = useCallback(() => {\r\n        setIsAuthModal(true);\r\n    }, []);\r\n    const onLogout = useCallback(() => {\r\n        setIsAuthModal(false);\r\n        dispatch(UserActions.logout())\r\n    }, [dispatch]);\r\n    if (isAuth){\r\n        return(        \r\n            <div className= {classNames(cls.navbar)}>\r\n                <Button\r\n                    theme={ThemeButton.BACKGROUNDINVERTED}\r\n                    className={cls.links}\r\n                    onClick={onLogout}\r\n                >\r\n                    {t('Выйти')}\r\n                </Button>\r\n            </div>)\r\n\r\n    }\r\n    return (\r\n        <div className= {classNames(cls.navbar)}>\r\n            <Button\r\n                theme={ThemeButton.CLEARINVERTED}\r\n                className={cls.links}\r\n                onClick={onShow}\r\n            >\r\n                {t('Войти')}\r\n            </Button>\r\n            <LoginModal isOpen ={isAuthModal} onClose = {onClose}/>\r\n        </div>\r\n    );\r\n});\r\n"],"names":[],"sourceRoot":""}