{"version":3,"file":"widgets-navbar-ui-Navbar-stories.b74de4c77d16839ad64b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACvBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;ACtCA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACLA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA","sources":["webpack://prodproj/./src/features/AuthByUsername/model/services/LoginByUsername/LoginByUsername.ts","webpack://prodproj/./src/features/AuthByUsername/model/slice/LoginSlice.ts","webpack://prodproj/./src/features/AuthByUsername/ui/LoginForm/LoginForm.async.ts","webpack://prodproj/./src/shared/config/storybook/StoreDecorator/StoreDecorator.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\nimport { User, UserActions } from 'entities/User'\r\nimport { USER_LOCALSTORAGE_KEY } from 'shared/const/localstorage'\r\n\r\ninterface LoginByUsernameProps{\r\n    username:string,\r\n    password:string\r\n}\r\nexport const LoginByUsername = createAsyncThunk<User,LoginByUsernameProps,{ rejectValue: string }>(\r\n    'login/LoginByUsername',\r\n    async (AuthData, thunkAPI) => {\r\n        try {\r\n            const response = await axios.post<User>('http://localhost:8000/login', AuthData)\r\n            if (!response){\r\n                throw new Error();\r\n            }\r\n            localStorage.setItem(USER_LOCALSTORAGE_KEY, JSON.stringify(response.data))\r\n            thunkAPI.dispatch(UserActions.setAuthData(response.data))\r\n            return response.data\r\n        } catch (err) {\r\n            return thunkAPI.rejectWithValue(\"Неправильный юзернейм или пароль\")\r\n        }\r\n    }\r\n)\r\n\r\n","import { PayloadAction, createSlice } from '@reduxjs/toolkit'\r\nimport { LoginShema } from '../types/LoginShema'\r\nimport { LoginByUsername } from '../services/LoginByUsername/LoginByUsername'\r\n\r\nconst initialState: LoginShema = {\r\n    username:'',\r\n    password:'',\r\n    isLoading:false,\r\n    error:''\r\n}\r\nexport const LoginSlice = createSlice({\r\n    name:'login',\r\n    initialState,\r\n    reducers:{\r\n        setUsername : (state , action:PayloadAction<string>) => {\r\n            state.username = action.payload\r\n\r\n        },\r\n        setPassword : (state, action:PayloadAction<string>) => {\r\n            state.password = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(LoginByUsername.pending, (state) => {\r\n                state.error = undefined;\r\n                state.isLoading = true\r\n            })\r\n            .addCase(LoginByUsername.fulfilled, (state, action) => {\r\n                state.isLoading = false\r\n            })\r\n            .addCase(LoginByUsername.rejected, (state, action) => {\r\n                state.isLoading = false\r\n                state.error = action.payload\r\n            })\r\n    },\r\n})\r\nexport const {actions:LoginActions} = LoginSlice\r\nexport const {reducer:LoginReducer} = LoginSlice","import { FC, lazy } from 'react';\r\nimport { LoginFormProps } from './LoginForm';\r\n\r\nexport const LoginFormAsync = lazy<FC<LoginFormProps>>(() => new Promise((resolve) => {\r\n    // @ts-ignore\r\n    setTimeout(() => resolve(import('./LoginForm')), 1500);\r\n}));\r\n","import { Story, StoryFn } from '@storybook/react';\nimport { StateSchema, StoreProvider } from 'app/provider/StoreProvider';\nimport { DeepPartial, ReducersMapObject } from '@reduxjs/toolkit';\nimport { LoginReducer } from 'features/AuthByUsername/model/slice/LoginSlice';\nconst defaultAsyncReducers: DeepPartial<ReducersMapObject<StateSchema>> = {\n    login: LoginReducer,\n};\n\nexport const StoreDecorator = (\n    state: DeepPartial<StateSchema>,\n    asyncReducers?: DeepPartial<ReducersMapObject<StateSchema>>,\n) => (StoryComponent: StoryFn) => (\n    <StoreProvider initialState ={state as StateSchema}  asyncReducers={{ ...defaultAsyncReducers, ...asyncReducers }}>\n        <StoryComponent />\n    </StoreProvider>\n);\n"],"names":[],"sourceRoot":""}