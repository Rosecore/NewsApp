{"version":3,"file":"widgets-navbar-ui-Navbar-stories.af72a2e96c17736a4be1.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;ACAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://prodproj/./src/entities/User/index.ts","webpack://prodproj/./src/entities/User/modal/slice/UserSlice.tsx","webpack://prodproj/./src/features/AuthByUsername/model/services/LoginByUsername/LoginByUsername.ts"],"sourcesContent":["import { UserActions, UserReducer } from \"./modal/slice/UserSlice\";\r\nimport type { User } from \"./modal/types/User\";\r\nimport type { UserSchema } from \"./modal/types/User\";\r\n\r\nexport {UserActions, UserReducer, User,UserSchema}","import { PayloadAction, createSlice } from '@reduxjs/toolkit'\r\nimport { User, UserSchema } from '../types/User'\r\n\r\nconst initialState: UserSchema = {\r\n   \r\n}\r\nexport const UserSlice = createSlice({\r\n    name:'user',\r\n    initialState,\r\n    reducers:{\r\n        setAuthData: (state,action:PayloadAction<User>)=>{\r\n            state.authData=action.payload\r\n        }\r\n    }\r\n})\r\nexport const {actions:UserActions} = UserSlice\r\nexport const {reducer:UserReducer} = UserSlice","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport axios from 'axios'\r\nimport { User, UserActions } from 'entities/User'\r\n\r\ninterface LoginByUsernameProps{\r\n    username:string,\r\n    password:string\r\n}\r\nexport const LoginByUsername = createAsyncThunk<User,LoginByUsernameProps,{ rejectValue: string }>(\r\n    'login/LoginByUsername',\r\n    async (AuthData, thunkAPI) => {\r\n        try {\r\n            const response = await axios.post<User>('http://localhost:8000/login', AuthData)\r\n            if (!response){\r\n                throw new Error();\r\n            }\r\n            thunkAPI.dispatch(UserActions.setAuthData(response.data))\r\n            return response.data\r\n        } catch (err) {\r\n            return thunkAPI.rejectWithValue(\"Неправильный юзернейм или пароль\")\r\n        }\r\n    }\r\n)\r\n\r\n"],"names":[],"sourceRoot":""}