{"version":3,"file":"shared-ui-Button-Button-stories.86e43983adcab7006154.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;;;;;;;;;;;;;;;;;ACXA;AACA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AClBA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AAbA;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AAAA;AACA","sources":["webpack://prodproj/./src/app/provider/themeProvider/index.tsx","webpack://prodproj/./src/app/provider/themeProvider/lib/ThemeContext.tsx","webpack://prodproj/./src/app/provider/themeProvider/lib/UseTheme.ts","webpack://prodproj/./src/app/provider/themeProvider/ui/ThemeProvider.tsx","webpack://prodproj/./src/shared/config/storybook/ThemeDecorator/ThemeDecorator.tsx"],"sourcesContent":["import ThemeProvider from \"./ui/ThemeProvider\";\r\nimport { UseTheme } from \"./lib/UseTheme\";\r\nimport { Theme } from \"./lib/ThemeContext\";\r\n\r\nexport {ThemeProvider, UseTheme, Theme}","import { createContext } from \"react\";\r\n\r\nexport enum Theme {\r\n    LIGHT = 'light',\r\n    DARK = 'dark'\r\n}\r\nexport interface ThemeProps {\r\n    theme?: Theme;\r\n    setTheme?:(theme:Theme) => void\r\n}\r\nexport const ThemeContext = createContext<ThemeProps>({})\r\nexport const LOCAL_STORAGE_THEME_KEY = \"theme\"","import { LOCAL_STORAGE_THEME_KEY, Theme, ThemeContext } from 'app/provider/themeProvider/lib/ThemeContext';\r\nimport React, { Suspense, useContext, useState } from 'react';\r\n\r\ninterface UseThemeResult{\r\n    theme: Theme;\r\n    ToggleTheme: () =>  void;\r\n}\r\n\r\n\r\nexport function UseTheme():UseThemeResult{\r\n    const {theme, setTheme} = useContext(ThemeContext)\r\n    const ToggleTheme = () =>{\r\n        const newTheme = theme === Theme.LIGHT ? Theme.DARK : Theme.LIGHT\r\n        setTheme(newTheme)\r\n        localStorage.setItem(LOCAL_STORAGE_THEME_KEY, newTheme)\r\n    }\r\n\r\n    return { theme, ToggleTheme}\r\n}","import React, {FC, ReactNode, JSXElementConstructor, useMemo, useState} from 'react';\r\nimport {LOCAL_STORAGE_THEME_KEY, Theme, ThemeContext} from 'app/provider/themeProvider/lib/ThemeContext';\r\n\r\nconst defaultTheme = localStorage.getItem(LOCAL_STORAGE_THEME_KEY) as Theme || Theme.LIGHT;\r\n\r\nconst ThemeProvider = (props:any) => {\r\n    const [theme, setTheme] = useState<Theme>(defaultTheme);\r\n\r\n    const defaultProps = useMemo(() => ({\r\n        theme: theme,\r\n        setTheme: setTheme,\r\n    }), [theme])\r\n\r\n    return (\r\n        <ThemeContext.Provider value={defaultProps}>\r\n            {props.children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};\r\n\r\nexport default ThemeProvider;\r\n","import { Story, StoryObj } from '@storybook/react';\nimport { Theme } from 'app/provider/themeProvider';\n\nexport const ThemeDecorator = (theme: Theme) => (StoryComponent: StoryObj) => (\n    <div className={`app ${theme}`}>\n        <StoryComponent />\n    </div>\n);\n"],"names":[],"sourceRoot":""}