{"version":3,"file":"widgets-navbar-ui-Navbar-stories.2f77911764d81c42295d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA","sources":["webpack://prodproj/./src/features/AuthByUsername/ui/LoginForm/LoginForm.tsx"],"sourcesContent":["import { classNames } from 'shared/lib/classNames/classNames';\r\nimport cls from './LoginForm.module.scss'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button } from 'shared/ui/Button/Button';\r\nimport { Input } from 'shared/ui/Input/Input';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UserActions } from 'entities/User';\r\nimport { LoginActions } from '../../model/slice/LoginSlice';\r\nimport { useCallback, memo } from 'react';\r\nimport { SelectLoginState } from '../../model/selectors/SelectLoginState/SelectLoginState';\r\nimport { LoginByUsername } from '../../model/services/LoginByUsername/LoginByUsername';\r\nimport { useAppDispatch } from '../../model/services/UseAppDispatch/UseAppDispatch';\r\nimport { TextTheme, Text } from 'shared/ui/Text/Text';\r\n//import { useAppDispatch } from '../../../../app/provider/StoreProvider';\r\n\r\n\r\nexport interface LoginFormProps {\r\n    className?: string,\r\n}\r\nconst LoginForm = memo(({className}:LoginFormProps) => {\r\n    const {t} = useTranslation()\r\n    const dispatch = useAppDispatch();\r\n    const {username, password, error, isLoading} = useSelector(SelectLoginState)\r\n\r\n    const onChangeUsername = useCallback((value:string) =>{\r\n        dispatch(LoginActions.setUsername(value))\r\n    },[dispatch])\r\n\r\n    const onChangePassword =  useCallback((value:string) =>{\r\n        dispatch(LoginActions.setPassword(value))\r\n    },[dispatch])\r\n\r\n    const onLoginClick =  useCallback(() =>{\r\n        dispatch(LoginByUsername({username,password}))\r\n    },[dispatch,password,username])\r\n\r\n \r\n    return (\r\n        <div className={classNames(cls.LoginForm,{},[className])}>\r\n            <Text title={t('LoginForm')}></Text>\r\n            {error && <Text theme={TextTheme.ERROR} text={error}></Text>}\r\n            <Input type='text' onChange = {onChangeUsername} placeholder='EnterUsername' value={username}></Input>\r\n            <Input type='text' onChange = {onChangePassword} placeholder='EnterPassword' value={password}></Input>\r\n            <Button className={cls.lognBtn} onClick={onLoginClick} disabled={isLoading}>\r\n                {t(\"Enter\")}\r\n            </Button>\r\n        </div>\r\n    );\r\n});\r\n"],"names":[],"sourceRoot":""}