{"version":3,"file":"features-AuthByUsername-ui-LoginForm-LoginForm-stories.b78016c87ee7c09e427b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA","sources":["webpack://prodproj/./src/shared/lib/comonents/DynamicModuleLoader/DynamicModuleLoader.tsx"],"sourcesContent":["import { FC, ReactNode, useEffect } from 'react';\r\nimport { useDispatch, useStore } from 'react-redux';\r\nimport { ReduxStoreWithManager, StateSchemaKey } from 'app/provider/StoreProvider/config/StateSchema';\r\nimport { Reducer } from '@reduxjs/toolkit';\r\n\r\nexport type ReducersList = {\r\n    [name in StateSchemaKey]?: Reducer;\r\n}\r\n\r\ninterface DynamicModuleLoaderProps {\r\n    reducers: ReducersList;\r\n    removeAfterUnmount?: boolean;\r\n    children:ReactNode;\r\n}\r\n\r\nexport const DynamicModuleLoader: FC<DynamicModuleLoaderProps> = (props) => {\r\n    const {\r\n        children,\r\n        reducers,\r\n        removeAfterUnmount,\r\n    } = props;\r\n\r\n    const store = useStore() as ReduxStoreWithManager;\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        Object.entries(reducers).forEach(([name, reducer]) => {\r\n            store.reducerManager.add(name as StateSchemaKey, reducer);\r\n            dispatch({ type: `@INIT ${name} reducer` });\r\n        });\r\n\r\n        return () => {\r\n            if (removeAfterUnmount) {\r\n                Object.entries(reducers).forEach(([name, reducer]) => {\r\n                    store.reducerManager.remove(name as StateSchemaKey);\r\n                    dispatch({ type: `@DESTROY ${name} reducer` });\r\n                });\r\n            }\r\n        };\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return (\r\n        // eslint-disable-next-line react/jsx-no-useless-fragment\r\n        <>\r\n            {children}\r\n        </>\r\n    );\r\n};\r\n"],"names":[],"sourceRoot":""}