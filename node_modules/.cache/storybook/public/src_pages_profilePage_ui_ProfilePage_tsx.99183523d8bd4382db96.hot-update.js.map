{"version":3,"file":"src_pages_profilePage_ui_ProfilePage_tsx.99183523d8bd4382db96.hot-update.js","mappings":";;;;;;;;;;;;;;AACA;AAIA;AAEA;AAAA;AAAA;AAGA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACpDA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAGA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AAGA;AAnBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbA;AACA;;;;;;;;;;;;;;;;;ACDA;AACA;AAGA;;;;;;;;;;;;;;ACDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAhBA;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AAGA;;;;;;;;;;;;;;;ACCA;;;;;;;;;;;;;;;;;;ACJA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;AC7BA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA","sources":["webpack://prodproj/./src/app/provider/StoreProvider/config/ReducersManager.ts","webpack://prodproj/./src/app/provider/StoreProvider/config/store.ts","webpack://prodproj/./src/app/provider/StoreProvider/index.tsx","webpack://prodproj/./src/app/provider/StoreProvider/ui/StoreProvider.tsx","webpack://prodproj/./src/entities/Counter/index.ts","webpack://prodproj/./src/entities/Counter/model/selectors/getCounterValue/getCounterValue.tsx","webpack://prodproj/./src/entities/Counter/model/selectors/getCounter/getCounter.tsx","webpack://prodproj/./src/entities/Counter/model/slice/CounterSlice.tsx","webpack://prodproj/./src/entities/Counter/ui/Counter.tsx","webpack://prodproj/./src/entities/User/index.ts","webpack://prodproj/./src/entities/User/modal/selectors/getUserAuthData/getUserAuthData.ts","webpack://prodproj/./src/entities/User/modal/slice/UserSlice.tsx","webpack://prodproj/./src/shared/api/api.ts","webpack://prodproj/./src/shared/const/localstorage.ts"],"sourcesContent":["import { ReducerWithoutAction } from \"react\"\r\nimport { AnyAction, Reducer, ReducersMapObject, combineReducers } from \"redux\"\r\nimport { StateSchema } from \"..\"\r\nimport { ReducerManager, StateSchemaKey } from \"./StateSchema\"\r\n\r\nexport function createReducerManager(initialReducers:ReducersMapObject<StateSchema>):ReducerManager {\r\n    \r\n    const reducers = { ...initialReducers }\r\n  \r\n    \r\n    let combinedReducer = combineReducers(reducers)\r\n  \r\n    \r\n    let keysToRemove:StateSchemaKey[] = []\r\n  \r\n    return {\r\n        getReducerMap: () => reducers,\r\n  \r\n        reduce: (state:StateSchema, action:AnyAction) => {\r\n            if (keysToRemove.length > 0) {\r\n                state = { ...state }\r\n                for (let key of keysToRemove) {\r\n                    delete state[key]\r\n                }\r\n                keysToRemove = []\r\n            }\r\n  \r\n            return combinedReducer(state, action)\r\n        },\r\n  \r\n        add: (key:StateSchemaKey, reducer:Reducer) => {\r\n            if (!key || reducers[key]) {\r\n                return\r\n            }\r\n  \r\n            reducers[key] = reducer\r\n  \r\n            combinedReducer = combineReducers(reducers)\r\n        },\r\n  \r\n        remove: (key:StateSchemaKey) => {\r\n            if (!key || !reducers[key]) {\r\n                return\r\n            }\r\n  \r\n            delete reducers[key]\r\n  \r\n            keysToRemove.push(key)\r\n  \r\n            combinedReducer = combineReducers(reducers)\r\n        }\r\n    }\r\n}\r\n","import { ReducersMapObject, configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { StateSchema } from \"./StateSchema\";\r\nimport { CounterReducers } from \"entities/Counter\";\r\nimport { UserReducer } from \"entities/User\";\r\nimport { createReducerManager } from \"./ReducersManager\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { $ax } from \"shared/api/api\";\r\nimport { To, NavigateOptions } from \"react-router-dom\";\r\n\r\n\r\nexport function createReduxStore(\r\n    initialState?: StateSchema,\r\n    asyncReducers?: ReducersMapObject<StateSchema>,\r\n    navigate?: (to: To, options?: NavigateOptions)=> void,\r\n) {\r\n    const rootReducers: ReducersMapObject<StateSchema> = {\r\n        ...asyncReducers,\r\n        counter: CounterReducers,\r\n        user: UserReducer,\r\n    };\r\n\r\n    const reducerManager = createReducerManager(rootReducers);\r\n\r\n    const store = configureStore({\r\n        reducer: reducerManager.reduce as Reducer<CombinedState<StateSchema>>,\r\n        preloadedState: initialState,\r\n        middleware: getDefaultMiddleware => getDefaultMiddleware({\r\n            thunk:{\r\n                extraArgument:{\r\n                    api:$ax,\r\n                    navigate\r\n                }\r\n            }\r\n        })\r\n    });\r\n\r\n    // @ts-ignore\r\n    store.reducerManager = reducerManager;\r\n\r\n    return store;\r\n}\r\nexport type AppDispatch = ReturnType<typeof createReduxStore>['dispatch']\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n","import { createReduxStore } from \"./config/store\";\r\nimport {StoreProvider} from \"./ui/StoreProvider\";\r\nimport { StateSchema } from \"./config/StateSchema\";\r\nimport  {AppDispatch, useAppDispatch}  from \"./config/store\";\r\nimport { ReduxStoreWithManager } from \"./config/StateSchema\";\r\nimport { ExtraThunk } from \"./config/StateSchema\";\r\nexport {StoreProvider, createReduxStore, StateSchema, AppDispatch, useAppDispatch, ReduxStoreWithManager,ExtraThunk}","import React, { ReactNode } from 'react';\r\nimport { Provider, useDispatch } from 'react-redux';\r\nimport { createReduxStore } from '../config/store';\r\nimport { StateSchema } from '../config/StateSchema';\r\nimport { ReducersMapObject } from 'redux';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ninterface StoreProviderProps {\r\n    children?: ReactNode;\r\n    initialState?: DeepPartial<StateSchema>;\r\n    asyncReducers?: DeepPartial<ReducersMapObject<StateSchema>>\r\n}\r\n\r\nexport const StoreProvider = (props: StoreProviderProps) => {\r\n    const {\r\n        children,\r\n        initialState,\r\n        asyncReducers,\r\n    } = props;\r\n\r\n    const navigate = useNavigate();\r\n    const store = createReduxStore(\r\n        initialState as StateSchema,\r\n        asyncReducers as ReducersMapObject<StateSchema>,\r\n        navigate\r\n    );\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            {children}\r\n        </Provider>\r\n    );\r\n};\r\n","import { CounterReducers } from \"./model/slice/CounterSlice\";\r\nimport Counter from \"./ui/Counter\";\r\nimport type { CounterSchema } from \"./model/types/CounterSchema\";\r\n\r\nexport {CounterReducers,Counter,CounterSchema}","import { createSelector } from \"@reduxjs/toolkit\";\r\nimport { getCounter } from \"../getCounter/getCounter\";\r\nimport { CounterSchema } from \"../../types/CounterSchema\";\r\n\r\nexport const getCounterValue = createSelector(\r\n    getCounter,\r\n    ( counter:CounterSchema)=>\r\n        counter.value\r\n)","import { StateSchema } from \"app/provider/StoreProvider\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const getCounter = (state:StateSchema) => state.counter","import { createSlice } from '@reduxjs/toolkit'\r\nimport { CounterSchema } from '../types/CounterSchema'\r\n\r\nconst initialState: CounterSchema = {\r\n    value:0\r\n}\r\nexport const CounterSlice = createSlice({\r\n    name:'counter',\r\n    initialState,\r\n    reducers:{\r\n        increment: state =>{\r\n            state.value+=1\r\n        },\r\n        decrement:state =>{\r\n            state.value-=1\r\n        }\r\n    }\r\n})\r\nexport const {actions:CounterActions} = CounterSlice\r\nexport const {reducer:CounterReducers} = CounterSlice","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { classNames } from 'shared/lib/classNames/classNames';\r\nimport { Button } from 'shared/ui/Button/Button';\r\nimport { CounterActions } from '../model/slice/CounterSlice';\r\nimport { StateSchema } from 'app/provider/StoreProvider/config/StateSchema';\r\nimport { getCounterValue } from '../model/selectors/getCounterValue/getCounterValue';\r\n\r\ninterface CounerProps{\r\n    className?: string\r\n}\r\n\r\nconst Counter = ({className}:CounerProps) => {\r\n    const dispatch = useDispatch()\r\n    const counterValue = useSelector(getCounterValue)\r\n    const increment = () =>{\r\n        dispatch(CounterActions.increment())\r\n    }\r\n    const decrement = () =>{\r\n        dispatch(CounterActions.decrement())\r\n    }\r\n    return (\r\n        <div>\r\n            <h1 data-testid = \"value-title\">value = {counterValue}</h1>\r\n            <Button data-testid = \"increment-btn\" onClick={increment}>increment</Button>\r\n            <Button data-testid = \"decrement-btn\" onClick={decrement}>decrement</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;","import { UserActions, UserReducer } from \"./modal/slice/UserSlice\";\r\nimport type { User } from \"./modal/types/User\";\r\nimport type { UserSchema } from \"./modal/types/User\";\r\nimport { getUserAuthData } from \"./modal/selectors/getUserAuthData/getUserAuthData\";\r\nexport {UserActions, UserReducer, User,UserSchema,getUserAuthData }","import { StateSchema } from \"app/provider/StoreProvider\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nexport const getUserAuthData = (state:StateSchema) => state?.user.authData","import { PayloadAction, createSlice } from '@reduxjs/toolkit'\r\nimport { User, UserSchema } from '../types/User'\r\nimport { USER_LOCALSTORAGE_KEY } from 'shared/const/localstorage'\r\nimport { userInfo } from 'os'\r\n\r\nconst initialState: UserSchema = {\r\n   \r\n}\r\nexport const UserSlice = createSlice({\r\n    name:'user',\r\n    initialState,\r\n    reducers:{\r\n        setAuthData: (state,action:PayloadAction<User>)=>{\r\n            state.authData=action.payload\r\n        },\r\n        initAuthData:(state)=>{\r\n            const user = localStorage.getItem(USER_LOCALSTORAGE_KEY)\r\n            if (user){\r\n                state.authData = JSON.parse(user)\r\n            }\r\n        },\r\n        logout:(state)=>{\r\n            state.authData = undefined\r\n            localStorage.removeItem(USER_LOCALSTORAGE_KEY)\r\n        }\r\n\r\n    }\r\n})\r\nexport const {actions:UserActions} = UserSlice\r\nexport const {reducer:UserReducer} = UserSlice","import axios from \"axios\";\r\nimport { USER_LOCALSTORAGE_KEY } from \"shared/const/localstorage\";\r\n\r\nexport const $ax = axios.create({\r\n    baseURL:\"http://localhost:8000\",\r\n    headers:{\r\n        Authorization:localStorage.getItem(USER_LOCALSTORAGE_KEY)\r\n    }\r\n})","export const USER_LOCALSTORAGE_KEY = 'user'"],"names":[],"sourceRoot":""}